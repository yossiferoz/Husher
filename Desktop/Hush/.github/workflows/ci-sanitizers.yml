name: CI Tests with Sanitizers

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-with-sanitizers:
    name: Test with Address & Thread Sanitizers
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        build_type: [Debug, Release]
        compiler: [gcc-11, clang-14]
        include:
          - compiler: gcc-11
            cc: gcc-11
            cxx: g++-11
          - compiler: clang-14
            cc: clang-14
            cxx: clang++-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          pkg-config \
          libgl1-mesa-dev \
          libgtk-3-dev \
          libasound2-dev \
          gcc-11 \
          g++-11 \
          clang-14 \
          libc++-14-dev \
          libc++abi-14-dev
    
    - name: Configure CMake with Sanitizers
      run: |
        mkdir build
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_C_COMPILER=${{ matrix.cc }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} \
          -DBUILD_TESTS=ON \
          -DENABLE_CI_SANITIZERS=ON \
          -GNinja
    
    - name: Build tests
      run: |
        cd build
        ninja KhDetectorTests
    
    - name: Run SNR tests
      run: |
        cd build
        # Run only SNR-related tests with timeout
        timeout 300 ./KhDetectorTests --gtest_filter="*SNR*" --gtest_output=xml:snr_test_results.xml
      env:
        # Thread sanitizer options
        TSAN_OPTIONS: "halt_on_error=1:abort_on_error=1:history_size=7"
        # Address sanitizer options  
        ASAN_OPTIONS: "halt_on_error=1:abort_on_error=1:detect_leaks=1"
        # Suppress known issues in dependencies
        LSAN_OPTIONS: "suppressions=.github/sanitizer-suppressions.txt"
    
    - name: Run real-time safety tests
      run: |
        cd build
        # Run memory allocation tests
        timeout 300 ./KhDetectorTests --gtest_filter="*RealTimeSafety*" --gtest_output=xml:realtime_test_results.xml
      env:
        TSAN_OPTIONS: "halt_on_error=1:abort_on_error=1:history_size=7"
        ASAN_OPTIONS: "halt_on_error=1:abort_on_error=1:detect_leaks=1"
        LSAN_OPTIONS: "suppressions=.github/sanitizer-suppressions.txt"
    
    - name: Run all other tests
      run: |
        cd build
        # Run all other tests (excluding SNR and RealTimeSafety which were run above)
        timeout 600 ./KhDetectorTests --gtest_filter="-*SNR*:*RealTimeSafety*" --gtest_output=xml:other_test_results.xml
      env:
        TSAN_OPTIONS: "halt_on_error=1:abort_on_error=1:history_size=7"
        ASAN_OPTIONS: "halt_on_error=1:abort_on_error=1:detect_leaks=1"
        LSAN_OPTIONS: "suppressions=.github/sanitizer-suppressions.txt"
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: build/*test_results.xml
    
    - name: Upload sanitizer logs
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: sanitizer-logs-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: |
          build/*.log
          build/core*

  test-performance-baseline:
    name: Performance Baseline (No Sanitizers)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          pkg-config \
          libgl1-mesa-dev \
          libgtk-3-dev \
          libasound2-dev
    
    - name: Configure CMake (Release, No Sanitizers)
      run: |
        mkdir build
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_TESTS=ON \
          -DENABLE_CI_SANITIZERS=OFF \
          -GNinja
    
    - name: Build and run performance tests
      run: |
        cd build
        ninja KhDetectorTests
        # Run SNR tests for performance baseline
        ./KhDetectorTests --gtest_filter="*SNR*" --gtest_output=xml:baseline_snr_results.xml
    
    - name: Upload baseline results
      uses: actions/upload-artifact@v3
      with:
        name: baseline-performance-results
        path: build/baseline_snr_results.xml

  validate-real-time-safety:
    name: Validate Real-Time Safety
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          pkg-config \
          libgl1-mesa-dev \
          libgtk-3-dev \
          libasound2-dev \
          valgrind
    
    - name: Configure CMake for Real-Time Testing
      run: |
        mkdir build
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Debug \
          -DBUILD_TESTS=ON \
          -DENABLE_CI_SANITIZERS=ON \
          -GNinja
    
    - name: Build tests
      run: |
        cd build
        ninja KhDetectorTests
    
    - name: Run memory allocation tests with Valgrind
      run: |
        cd build
        # Use Valgrind to detect any memory allocations during processing
        valgrind --tool=massif --massif-out-file=massif.out ./KhDetectorTests --gtest_filter="*RealTimeSafety_NoMemoryAllocation*"
        
        # Check if any memory was allocated during the test
        ms_print massif.out > massif_report.txt
        
        # Fail if significant memory allocations were detected
        if grep -q "KB)" massif_report.txt; then
          echo "ERROR: Memory allocations detected during real-time processing!"
          cat massif_report.txt
          exit 1
        fi
    
    - name: Upload Valgrind results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: valgrind-memory-analysis
        path: |
          build/massif.out
          build/massif_report.txt 